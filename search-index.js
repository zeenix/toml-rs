var N=null,E="",T="t",U="u",searchIndex={};
var R=["option","value","values","string","insert","get_mut","remove","Datetime","result","error","datetime","Extracts the array value if it is an array.","Extracts the table value if it is a table.","serializer","Historical versions of toml-rs accidentally allowed a…","try_from","try_into","toml::map","to_owned","clone_into","borrow_mut","type_id","into_iter","borrow","typeid","toml::value","to_string","toml::ser","equivalent","toml::de","size_hint","next_back","ordering","formatter","from_str","datetimeparseerror","index_mut","serialize","deserialize","spanned","VacantEntry","OccupiedEntry","Serializer","Deserializer","IntoIter","DatetimeParseError"];

searchIndex["toml"]={"doc":"A [TOML]-parsing library","i":[[3,"Spanned","toml","A spanned value, indicating the range at which it is…",N,N],[0,"map",E,"A map of String to toml::Value.",N,N],[3,"Map",R[17],"Represents a JSON key/value type.",N,N],[3,R[40],E,"A vacant Entry. It is part of the [`Entry`] enum.",N,N],[3,R[41],E,"An occupied Entry. It is part of the [`Entry`] enum.",N,N],[3,"Iter",E,"An iterator over a toml::Map's entries.",N,N],[3,"IterMut",E,"A mutable iterator over a toml::Map's entries.",N,N],[3,R[44],E,"An owning iterator over a toml::Map's entries.",N,N],[3,"Keys",E,"An iterator over a toml::Map's keys.",N,N],[3,"Values",E,"An iterator over a toml::Map's values.",N,N],[4,"Entry",E,"A view into a single entry in a map, which may either be…",N,N],[13,"Vacant",E,"A vacant Entry.",0,N],[13,"Occupied",E,"An occupied Entry.",0,N],[11,"new",E,"Makes a new empty Map.",1,[[],["self"]]],[11,"with_capacity",E,"Makes a new empty Map with the given initial capacity.",1,[[["usize"]],["self"]]],[11,"clear",E,"Clears the map, removing all values.",1,[[["self"]]]],[11,"get",E,"Returns a reference to the value corresponding to the key.",1,[[["self"],["q"]],[[R[0],[R[1]]],[R[1]]]]],[11,"contains_key",E,"Returns true if the map contains a value for the specified…",1,[[["self"],["q"]],["bool"]]],[11,R[5],E,"Returns a mutable reference to the value corresponding to…",1,[[["self"],["q"]],[[R[1]],[R[0],[R[1]]]]]],[11,R[4],E,"Inserts a key-value pair into the map.",1,[[["self"],[R[3]],[R[1]]],[[R[0],[R[1]]],[R[1]]]]],[11,R[6],E,"Removes a key from the map, returning the value at the key…",1,[[["self"],["q"]],[[R[0],[R[1]]],[R[1]]]]],[11,"entry",E,"Gets the given key's corresponding entry in the map for…",1,[[["self"],["s"]],["entry"]]],[11,"len",E,"Returns the number of elements in the map.",1,[[["self"]],["usize"]]],[11,"is_empty",E,"Returns true if the map contains no elements.",1,[[["self"]],["bool"]]],[11,"iter",E,"Gets an iterator over the entries of the map.",1,[[["self"]],["iter"]]],[11,"iter_mut",E,"Gets a mutable iterator over the entries of the map.",1,[[["self"]],["itermut"]]],[11,"keys",E,"Gets an iterator over the keys of the map.",1,[[["self"]],["keys"]]],[11,R[2],E,"Gets an iterator over the values of the map.",1,[[["self"]],[R[2]]]],[11,"key",E,"Returns a reference to this entry's key.",0,[[["self"]],[R[3]]]],[11,"or_insert",E,"Ensures a value is in the entry by inserting the default…",0,[[[R[1]]],[R[1]]]],[11,"or_insert_with",E,"Ensures a value is in the entry by inserting the result of…",0,[[["f"]],[R[1]]]],[11,"key",E,"Gets a reference to the key that would be used when…",2,[[["self"]],[R[3]]]],[11,R[4],E,"Sets the value of the entry with the VacantEntry's key,…",2,[[[R[1]]],[R[1]]]],[11,"key",E,"Gets a reference to the key in the entry.",3,[[["self"]],[R[3]]]],[11,"get",E,"Gets a reference to the value in the entry.",3,[[["self"]],[R[1]]]],[11,R[5],E,"Gets a mutable reference to the value in the entry.",3,[[["self"]],[R[1]]]],[11,"into_mut",E,"Converts the entry into a mutable reference to its value.",3,[[],[R[1]]]],[11,R[4],E,"Sets the value of the entry with the `OccupiedEntry`'s…",3,[[["self"],[R[1]]],[R[1]]]],[11,R[6],E,"Takes the value of the entry out of the map, and returns it.",3,[[],[R[1]]]],[0,R[1],"toml","Definition of a TOML value",N,N],[3,R[7],R[25],"A parsed TOML datetime value",N,N],[3,R[45],E,"Error returned from parsing a `Datetime` in the `FromStr`…",N,N],[4,"Value",E,"Representation of a TOML value.",N,N],[13,"String",E,"Represents a TOML string",4,N],[13,"Integer",E,"Represents a TOML integer",4,N],[13,"Float",E,"Represents a TOML float",4,N],[13,"Boolean",E,"Represents a TOML boolean",4,N],[13,R[7],E,"Represents a TOML datetime",4,N],[13,"Array",E,"Represents a TOML array",4,N],[13,"Table",E,"Represents a TOML table",4,N],[6,"Array",E,"Type representing a TOML array, payload of the…",N,N],[6,"Table",E,"Type representing a TOML table, payload of the…",N,N],[8,"Index",E,"Types that can be used to index a `toml::Value`",N,N],[11,R[15],E,"Convert a `T` into `toml::Value` which is an enum that can…",4,[[[T]],[[R[9]],[R[8],[R[1],R[9]]],[R[1]]]]],[11,R[16],E,"Interpret a `toml::Value` as an instance of type `T`.",4,[[],[[R[8],[R[9]]],[R[9]]]]],[11,"get",E,"Index into a TOML array or map. A string index can be used…",4,[[["self"],["index"]],[[R[0],[R[1]]],[R[1]]]]],[11,R[5],E,"Mutably index into a TOML array or map. A string index can…",4,[[["self"],["index"]],[[R[1]],[R[0],[R[1]]]]]],[11,"as_integer",E,"Extracts the integer value if it is an integer.",4,[[["self"]],[[R[0],["i64"]],["i64"]]]],[11,"is_integer",E,"Tests whether this value is an integer.",4,[[["self"]],["bool"]]],[11,"as_float",E,"Extracts the float value if it is a float.",4,[[["self"]],[["f64"],[R[0],["f64"]]]]],[11,"is_float",E,"Tests whether this value is a float.",4,[[["self"]],["bool"]]],[11,"as_bool",E,"Extracts the boolean value if it is a boolean.",4,[[["self"]],[[R[0],["bool"]],["bool"]]]],[11,"is_bool",E,"Tests whether this value is a boolean.",4,[[["self"]],["bool"]]],[11,"as_str",E,"Extracts the string of this value if it is a string.",4,[[["self"]],[[R[0],["str"]],["str"]]]],[11,"is_str",E,"Tests if this value is a string.",4,[[["self"]],["bool"]]],[11,"as_datetime",E,"Extracts the datetime value if it is a datetime.",4,[[["self"]],[[R[0],[R[10]]],[R[10]]]]],[11,"is_datetime",E,"Tests whether this value is a datetime.",4,[[["self"]],["bool"]]],[11,"as_array",E,R[11],4,[[["self"]],[["vec"],[R[0],["vec"]]]]],[11,"as_array_mut",E,R[11],4,[[["self"]],[[R[0],["vec"]],["vec"]]]],[11,"is_array",E,"Tests whether this value is an array.",4,[[["self"]],["bool"]]],[11,"as_table",E,R[12],4,[[["self"]],[["table"],[R[0],["table"]]]]],[11,"as_table_mut",E,R[12],4,[[["self"]],[["table"],[R[0],["table"]]]]],[11,"is_table",E,"Tests whether this value is a table.",4,[[["self"]],["bool"]]],[11,"same_type",E,"Tests whether this and another value have the same type.",4,[[[R[1]],["self"]],["bool"]]],[11,"type_str",E,"Returns a human-readable representation of the type of…",4,[[["self"]],["str"]]],[0,"ser","toml","Serializing Rust structures into TOML.",N,N],[3,R[42],R[27],"Serialization implementation for TOML.",N,N],[4,"Error",E,"Errors that can occur when serializing a type.",N,N],[13,"UnsupportedType",E,"Indicates that a Rust type was requested to be serialized…",5,N],[13,"KeyNotString",E,"The key of all TOML maps must be strings, but…",5,N],[13,"ValueAfterTable",E,"All values in a TOML table must be emitted before further…",5,N],[13,"DateInvalid",E,"A serialized date was invalid.",5,N],[13,"NumberInvalid",E,"A serialized number was invalid.",5,N],[13,"UnsupportedNone",E,"None was attempted to be serialized, but it's not supported.",5,N],[13,"Custom",E,"A custom error which could be generated when serializing a…",5,N],[5,"to_vec",E,"Serialize the given data structure as a TOML byte vector.",N,[[[T]],[[R[8],["vec",R[9]]],["vec",["u8"]],[R[9]]]]],[5,R[26],E,"Serialize the given data structure as a String of TOML.",N,[[[T]],[[R[8],[R[3],R[9]]],[R[3]],[R[9]]]]],[5,"to_string_pretty",E,"Serialize the given data structure as a \"pretty\" String of…",N,[[[T]],[[R[8],[R[3],R[9]]],[R[3]],[R[9]]]]],[5,"tables_last",E,"Convenience function to serialize items in a map in an…",N,[[["i"],["s"]],[R[8]]]],[11,"new",E,"Creates a new serializer which will emit TOML into the…",6,[[[R[3]]],[R[13]]]],[11,"pretty",E,"Instantiate a \"pretty\" formatter",6,[[[R[3]]],[R[13]]]],[11,"pretty_string",E,"Enable or Disable pretty strings",6,[[["self"],["bool"]],["self"]]],[11,"pretty_string_literal",E,"Enable or Disable Literal strings for pretty strings",6,[[["self"],["bool"]],["self"]]],[11,"pretty_array",E,"Enable or Disable pretty arrays",6,[[["self"],["bool"]],["self"]]],[11,"pretty_array_indent",E,"Set the indent for pretty arrays",6,[[["self"],["usize"]],["self"]]],[11,"pretty_array_trailing_comma",E,"Specify whether to use a trailing comma when serializing…",6,[[["self"],["bool"]],["self"]]],[0,"de","toml","Deserializing TOML into Rust structures.",N,N],[3,"Error",R[29],"Errors that can occur when deserializing a type.",N,N],[3,R[43],E,"Deserialization implementation for TOML.",N,N],[5,"from_slice",E,"Deserializes a byte slice into a type.",N,[[],[[R[8],[R[9]]],[R[9]]]]],[5,R[34],E,"Deserializes a string into a type.",N,[[["str"]],[[R[8],[R[9]]],[R[9]]]]],[11,"new",E,"Creates a new deserializer which will be deserializing the…",7,[[["str"]],["deserializer"]]],[11,"end",E,"The `Deserializer::end` method should be called after a…",7,[[["self"]],[[R[8],[R[9]]],[R[9]]]]],[11,"set_require_newline_after_table",E,R[14],7,[[["self"],["bool"]]]],[11,"set_allow_duplicate_after_longer_table",E,R[14],7,[[["self"],["bool"]]]],[11,"line_col",E,"Produces a (line, column) pair of the position of the…",8,[[["self"]],[R[0]]]],[11,"start","toml","Access the start of the span of the contained value.",9,[[["self"]],["usize"]]],[11,"end",E,"Access the end of the span of the contained value.",9,[[["self"]],["usize"]]],[11,"span",E,"Get the span of the contained value.",9,[[["self"]]]],[11,"into_inner",E,"Consumes the spanned value and returns the contained value.",9,[[],[T]]],[11,"get_ref",E,"Returns a reference to the contained value.",9,[[["self"]],[T]]],[11,R[5],E,"Returns a mutable reference to the contained value.",9,[[["self"]],[T]]],[14,"toml",E,"Construct a [`toml::Value`] from TOML syntax.",N,N],[11,"into",E,E,9,[[],[U]]],[11,"from",E,E,9,[[[T]],[T]]],[11,R[18],E,E,9,[[["self"]],[T]]],[11,R[19],E,E,9,[[["self"],[T]]]],[11,R[15],E,E,9,[[[U]],[R[8]]]],[11,R[16],E,E,9,[[],[R[8]]]],[11,R[23],E,E,9,[[["self"]],[T]]],[11,R[20],E,E,9,[[["self"]],[T]]],[11,R[21],E,E,9,[[["self"]],[R[24]]]],[11,R[28],E,E,9,[[["k"],["self"]],["bool"]]],[11,"into",R[17],E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[22],E,E,1,[[],["i"]]],[11,R[18],E,E,1,[[["self"]],[T]]],[11,R[19],E,E,1,[[["self"],[T]]]],[11,R[15],E,E,1,[[[U]],[R[8]]]],[11,R[16],E,E,1,[[],[R[8]]]],[11,R[23],E,E,1,[[["self"]],[T]]],[11,R[20],E,E,1,[[["self"]],[T]]],[11,R[21],E,E,1,[[["self"]],[R[24]]]],[11,"into",E,E,2,[[],[U]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[15],E,E,2,[[[U]],[R[8]]]],[11,R[16],E,E,2,[[],[R[8]]]],[11,R[23],E,E,2,[[["self"]],[T]]],[11,R[20],E,E,2,[[["self"]],[T]]],[11,R[21],E,E,2,[[["self"]],[R[24]]]],[11,"into",E,E,3,[[],[U]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[15],E,E,3,[[[U]],[R[8]]]],[11,R[16],E,E,3,[[],[R[8]]]],[11,R[23],E,E,3,[[["self"]],[T]]],[11,R[20],E,E,3,[[["self"]],[T]]],[11,R[21],E,E,3,[[["self"]],[R[24]]]],[11,"into",E,E,10,[[],[U]]],[11,"from",E,E,10,[[[T]],[T]]],[11,R[22],E,E,10,[[],["i"]]],[11,R[15],E,E,10,[[[U]],[R[8]]]],[11,R[16],E,E,10,[[],[R[8]]]],[11,R[23],E,E,10,[[["self"]],[T]]],[11,R[20],E,E,10,[[["self"]],[T]]],[11,R[21],E,E,10,[[["self"]],[R[24]]]],[11,"into",E,E,11,[[],[U]]],[11,"from",E,E,11,[[[T]],[T]]],[11,R[22],E,E,11,[[],["i"]]],[11,R[15],E,E,11,[[[U]],[R[8]]]],[11,R[16],E,E,11,[[],[R[8]]]],[11,R[23],E,E,11,[[["self"]],[T]]],[11,R[20],E,E,11,[[["self"]],[T]]],[11,R[21],E,E,11,[[["self"]],[R[24]]]],[11,"into",E,E,12,[[],[U]]],[11,"from",E,E,12,[[[T]],[T]]],[11,R[22],E,E,12,[[],["i"]]],[11,R[15],E,E,12,[[[U]],[R[8]]]],[11,R[16],E,E,12,[[],[R[8]]]],[11,R[23],E,E,12,[[["self"]],[T]]],[11,R[20],E,E,12,[[["self"]],[T]]],[11,R[21],E,E,12,[[["self"]],[R[24]]]],[11,"into",E,E,13,[[],[U]]],[11,"from",E,E,13,[[[T]],[T]]],[11,R[22],E,E,13,[[],["i"]]],[11,R[15],E,E,13,[[[U]],[R[8]]]],[11,R[16],E,E,13,[[],[R[8]]]],[11,R[23],E,E,13,[[["self"]],[T]]],[11,R[20],E,E,13,[[["self"]],[T]]],[11,R[21],E,E,13,[[["self"]],[R[24]]]],[11,"into",E,E,14,[[],[U]]],[11,"from",E,E,14,[[[T]],[T]]],[11,R[22],E,E,14,[[],["i"]]],[11,R[15],E,E,14,[[[U]],[R[8]]]],[11,R[16],E,E,14,[[],[R[8]]]],[11,R[23],E,E,14,[[["self"]],[T]]],[11,R[20],E,E,14,[[["self"]],[T]]],[11,R[21],E,E,14,[[["self"]],[R[24]]]],[11,"into",E,E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[15],E,E,0,[[[U]],[R[8]]]],[11,R[16],E,E,0,[[],[R[8]]]],[11,R[23],E,E,0,[[["self"]],[T]]],[11,R[20],E,E,0,[[["self"]],[T]]],[11,R[21],E,E,0,[[["self"]],[R[24]]]],[11,"into",R[25],E,15,[[],[U]]],[11,"from",E,E,15,[[[T]],[T]]],[11,R[18],E,E,15,[[["self"]],[T]]],[11,R[19],E,E,15,[[["self"],[T]]]],[11,R[26],E,E,15,[[["self"]],[R[3]]]],[11,R[15],E,E,15,[[[U]],[R[8]]]],[11,R[16],E,E,15,[[],[R[8]]]],[11,R[23],E,E,15,[[["self"]],[T]]],[11,R[20],E,E,15,[[["self"]],[T]]],[11,R[21],E,E,15,[[["self"]],[R[24]]]],[11,"into",E,E,16,[[],[U]]],[11,"from",E,E,16,[[[T]],[T]]],[11,R[18],E,E,16,[[["self"]],[T]]],[11,R[19],E,E,16,[[["self"],[T]]]],[11,R[26],E,E,16,[[["self"]],[R[3]]]],[11,R[15],E,E,16,[[[U]],[R[8]]]],[11,R[16],E,E,16,[[],[R[8]]]],[11,R[23],E,E,16,[[["self"]],[T]]],[11,R[20],E,E,16,[[["self"]],[T]]],[11,R[21],E,E,16,[[["self"]],[R[24]]]],[11,"into",E,E,4,[[],[U]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[18],E,E,4,[[["self"]],[T]]],[11,R[19],E,E,4,[[["self"],[T]]]],[11,R[26],E,E,4,[[["self"]],[R[3]]]],[11,R[15],E,E,4,[[[U]],[R[8]]]],[11,R[16],E,E,4,[[],[R[8]]]],[11,R[23],E,E,4,[[["self"]],[T]]],[11,R[20],E,E,4,[[["self"]],[T]]],[11,R[21],E,E,4,[[["self"]],[R[24]]]],[11,"into",R[27],E,6,[[],[U]]],[11,"from",E,E,6,[[[T]],[T]]],[11,R[15],E,E,6,[[[U]],[R[8]]]],[11,R[16],E,E,6,[[],[R[8]]]],[11,R[23],E,E,6,[[["self"]],[T]]],[11,R[20],E,E,6,[[["self"]],[T]]],[11,R[21],E,E,6,[[["self"]],[R[24]]]],[11,"into",E,E,5,[[],[U]]],[11,"from",E,E,5,[[[T]],[T]]],[11,R[18],E,E,5,[[["self"]],[T]]],[11,R[19],E,E,5,[[["self"],[T]]]],[11,R[26],E,E,5,[[["self"]],[R[3]]]],[11,R[15],E,E,5,[[[U]],[R[8]]]],[11,R[16],E,E,5,[[],[R[8]]]],[11,R[23],E,E,5,[[["self"]],[T]]],[11,R[20],E,E,5,[[["self"]],[T]]],[11,R[21],E,E,5,[[["self"]],[R[24]]]],[11,R[28],E,E,5,[[["k"],["self"]],["bool"]]],[11,"into",R[29],E,8,[[],[U]]],[11,"from",E,E,8,[[[T]],[T]]],[11,R[18],E,E,8,[[["self"]],[T]]],[11,R[19],E,E,8,[[["self"],[T]]]],[11,R[26],E,E,8,[[["self"]],[R[3]]]],[11,R[15],E,E,8,[[[U]],[R[8]]]],[11,R[16],E,E,8,[[],[R[8]]]],[11,R[23],E,E,8,[[["self"]],[T]]],[11,R[20],E,E,8,[[["self"]],[T]]],[11,R[21],E,E,8,[[["self"]],[R[24]]]],[11,R[28],E,E,8,[[["k"],["self"]],["bool"]]],[11,"into",E,E,7,[[],[U]]],[11,"from",E,E,7,[[[T]],[T]]],[11,R[15],E,E,7,[[[U]],[R[8]]]],[11,R[16],E,E,7,[[],[R[8]]]],[11,R[23],E,E,7,[[["self"]],[T]]],[11,R[20],E,E,7,[[["self"]],[T]]],[11,R[21],E,E,7,[[["self"]],[R[24]]]],[11,"from",R[25],E,4,[[["str"]],[R[1]]]],[11,"from",E,E,4,[[["vec"]],[R[1]]]],[11,"from",E,E,4,[[["btreemap"]],[R[1]]]],[11,"from",E,E,4,[[["hashmap"]],[R[1]]]],[11,"from",E,E,4,[[[R[3]]],[R[1]]]],[11,"from",E,E,4,[[["i64"]],[R[1]]]],[11,"from",E,E,4,[[["i32"]],[R[1]]]],[11,"from",E,E,4,[[["i8"]],[R[1]]]],[11,"from",E,E,4,[[["u8"]],[R[1]]]],[11,"from",E,E,4,[[["u32"]],[R[1]]]],[11,"from",E,E,4,[[["f64"]],[R[1]]]],[11,"from",E,E,4,[[["f32"]],[R[1]]]],[11,"from",E,E,4,[[["bool"]],[R[1]]]],[11,"from",E,E,4,[[[R[10]]],[R[1]]]],[11,"from",E,E,4,[[["table"]],[R[1]]]],[11,"next",R[17],E,10,[[["self"]],[R[0]]]],[11,R[30],E,E,10,[[["self"]]]],[11,"next",E,E,11,[[["self"]],[R[0]]]],[11,R[30],E,E,11,[[["self"]]]],[11,"next",E,E,12,[[["self"]],[R[0]]]],[11,R[30],E,E,12,[[["self"]]]],[11,"next",E,E,13,[[["self"]],[R[0]]]],[11,R[30],E,E,13,[[["self"]]]],[11,"next",E,E,14,[[["self"]],[R[0]]]],[11,R[30],E,E,14,[[["self"]]]],[11,"extend",E,E,1,[[["self"],[T]]]],[11,R[22],E,E,1,[[]]],[11,R[31],E,E,10,[[["self"]],[R[0]]]],[11,R[31],E,E,11,[[["self"]],[R[0]]]],[11,R[31],E,E,12,[[["self"]],[R[0]]]],[11,R[31],E,E,13,[[["self"]],[R[0]]]],[11,R[31],E,E,14,[[["self"]],[R[0]]]],[11,"len",E,E,10,[[["self"]],["usize"]]],[11,"len",E,E,11,[[["self"]],["usize"]]],[11,"len",E,E,12,[[["self"]],["usize"]]],[11,"len",E,E,13,[[["self"]],["usize"]]],[11,"len",E,E,14,[[["self"]],["usize"]]],[11,"clone",E,E,1,[[["self"]],["self"]]],[11,"clone",R[25],E,4,[[["self"]],[R[1]]]],[11,"clone",E,E,15,[[["self"]],[R[10]]]],[11,"clone",E,E,16,[[["self"]],[R[35]]]],[11,"clone",R[27],E,5,[[["self"]],[R[9]]]],[11,"clone",R[29],E,8,[[["self"]],[R[9]]]],[11,"clone","toml",E,9,[[["self"]],[R[39]]]],[11,"default",R[17],E,1,[[],["self"]]],[11,"cmp","toml",E,9,[[["self"]],[R[32]]]],[11,"eq",R[17],E,1,[[["self"]],["bool"]]],[11,"eq",R[25],E,4,[[[R[1]],["self"]],["bool"]]],[11,"ne",E,E,4,[[[R[1]],["self"]],["bool"]]],[11,"eq",E,E,15,[[["self"],[R[10]]],["bool"]]],[11,"ne",E,E,15,[[["self"],[R[10]]],["bool"]]],[11,"eq",R[27],E,5,[[[R[9]],["self"]],["bool"]]],[11,"ne",E,E,5,[[[R[9]],["self"]],["bool"]]],[11,"eq",R[29],E,8,[[[R[9]],["self"]],["bool"]]],[11,"ne",E,E,8,[[[R[9]],["self"]],["bool"]]],[11,"eq","toml",E,9,[[["self"]],["bool"]]],[11,"partial_cmp",E,E,9,[[["self"]],[[R[0],[R[32]]],[R[32]]]]],[11,"fmt",R[25],E,4,[[["self"],[R[33]]],[R[8]]]],[11,"fmt",E,E,15,[[["self"],[R[33]]],[R[8]]]],[11,"fmt",E,E,16,[[["self"],[R[33]]],[R[8]]]],[11,"fmt",R[27],E,5,[[["self"],[R[33]]],[R[8]]]],[11,"fmt",R[29],E,8,[[["self"],[R[33]]],[R[8]]]],[11,"fmt",R[17],E,1,[[["self"],[R[33]]],[[R[8],[R[9]]],[R[9]]]]],[11,"fmt",R[25],E,4,[[["self"],[R[33]]],[R[8]]]],[11,"fmt",E,E,16,[[["self"],[R[33]]],[R[8]]]],[11,"fmt",E,E,15,[[["self"],[R[33]]],[R[8]]]],[11,"fmt",R[27],E,5,[[["self"],[R[33]]],[R[8]]]],[11,"fmt",R[29],E,8,[[["self"],[R[33]]],[R[8]]]],[11,"fmt","toml",E,9,[[["self"],[R[33]]],[R[8]]]],[11,R[34],R[25],E,4,[[["str"]],[[R[8],[R[1]]],[R[1]]]]],[11,R[34],E,E,15,[[["str"]],[[R[10]],[R[8],[R[10],R[35]]],[R[35]]]]],[11,"index",R[17],E,1,[[["self"],["q"]],[R[1]]]],[11,"index",R[25],E,4,[[["i"],["self"]],[R[1]]]],[11,R[36],R[17],E,1,[[["self"],["q"]],[R[1]]]],[11,R[36],R[25],E,4,[[["self"],["i"]],[R[1]]]],[11,"hash","toml",E,9,[[["self"],["h"]]]],[11,"from_iter",R[17],E,1,[[[T]],["self"]]],[11,R[23],"toml",E,9,[[["self"]],["str"]]],[11,"deserialize_any",R[25],E,4,[[["v"]],[[R[9]],[R[8],[R[9]]]]]],[11,"deserialize_enum",E,E,4,[[["str"],["v"]],[[R[9]],[R[8],[R[9]]]]]],[11,"deserialize_option",E,E,4,[[["v"]],[[R[9]],[R[8],[R[9]]]]]],[11,"deserialize_newtype_struct",E,E,4,[[["str"],["v"]],[[R[9]],[R[8],[R[9]]]]]],[11,"deserialize_bool",E,E,4,[[["v"]],[R[8]]]],[11,"deserialize_u8",E,E,4,[[["v"]],[R[8]]]],[11,"deserialize_u16",E,E,4,[[["v"]],[R[8]]]],[11,"deserialize_u32",E,E,4,[[["v"]],[R[8]]]],[11,"deserialize_u64",E,E,4,[[["v"]],[R[8]]]],[11,"deserialize_i8",E,E,4,[[["v"]],[R[8]]]],[11,"deserialize_i16",E,E,4,[[["v"]],[R[8]]]],[11,"deserialize_i32",E,E,4,[[["v"]],[R[8]]]],[11,"deserialize_i64",E,E,4,[[["v"]],[R[8]]]],[11,"deserialize_f32",E,E,4,[[["v"]],[R[8]]]],[11,"deserialize_f64",E,E,4,[[["v"]],[R[8]]]],[11,"deserialize_char",E,E,4,[[["v"]],[R[8]]]],[11,"deserialize_str",E,E,4,[[["v"]],[R[8]]]],[11,"deserialize_string",E,E,4,[[["v"]],[R[8]]]],[11,"deserialize_unit",E,E,4,[[["v"]],[R[8]]]],[11,"deserialize_seq",E,E,4,[[["v"]],[R[8]]]],[11,"deserialize_bytes",E,E,4,[[["v"]],[R[8]]]],[11,"deserialize_byte_buf",E,E,4,[[["v"]],[R[8]]]],[11,"deserialize_map",E,E,4,[[["v"]],[R[8]]]],[11,"deserialize_unit_struct",E,E,4,[[["str"],["v"]],[R[8]]]],[11,"deserialize_tuple_struct",E,E,4,[[["str"],["usize"],["v"]],[R[8]]]],[11,"deserialize_struct",E,E,4,[[["str"],["v"]],[R[8]]]],[11,"deserialize_tuple",E,E,4,[[["usize"],["v"]],[R[8]]]],[11,"deserialize_ignored_any",E,E,4,[[["v"]],[R[8]]]],[11,"deserialize_identifier",E,E,4,[[["v"]],[R[8]]]],[11,"into_deserializer",E,E,4,[[],["self"]]],[11,"custom",R[27],E,5,[[["display"]],[R[9]]]],[11,R[37],R[17],E,1,[[["s"],["self"]],[R[8]]]],[11,R[37],R[25],E,4,[[["s"],["self"]],[R[8]]]],[11,R[37],E,E,15,[[["s"],["self"]],[R[8]]]],[11,R[37],"toml",E,9,[[["s"],["self"]],[R[8]]]],[11,R[38],R[17],E,1,[[["d"]],[R[8]]]],[11,R[38],R[25],E,4,[[["d"]],[[R[1]],[R[8],[R[1]]]]]],[11,R[38],E,E,15,[[["d"]],[[R[10]],[R[8],[R[10]]]]]],[11,R[38],"toml",E,9,[[["d"]],[[R[39]],[R[8],[R[39]]]]]],[11,"custom",R[29],E,8,[[["display"]],[R[9]]]]],"p":[[4,"Entry"],[3,"Map"],[3,R[40]],[3,R[41]],[4,"Value"],[4,"Error"],[3,R[42]],[3,R[43]],[3,"Error"],[3,"Spanned"],[3,"Iter"],[3,"IterMut"],[3,R[44]],[3,"Keys"],[3,"Values"],[3,R[7]],[3,R[45]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);